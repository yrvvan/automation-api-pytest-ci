import json
import requests
import os
from dotenv import load_dotenv

load_dotenv()  # This loads the .env file


# Function to build parameters from the report
def param_builder():
    try:
        # Load the JSON report
        with open("./report.json", "r") as file:
            report_data = json.load(file)

        # Extract data from the report
        stats = report_data["summary"]

        information = {
            "test_duration": round(
                report_data.get("duration", 0) / 60, 2
            ),  # return 0 if duration missing
            "test_success_rate": round((stats.get("passed", 0) / max((stats.get("collected", 0) - stats.get("deselected", 0)), 1)) * 100, 2),
            "test_passed": stats.get("passed", 0),
            "test_failed": stats.get("failed", 0),
            "total_test_cases": stats.get("collected", 0) - stats.get("deselected", 0),
        }

        return information

    except Exception as error:
        print(f"Failed to process the report - Error: {error}")
        raise  # Re-raise the exception for handling elsewhere


# Function to send notification to Slack
def push_notification_slack():
    try:
        # Get test result parameters
        payload = param_builder()

        # Prepare the message for Slack
        message = {
            "username": "#ideku-test-reports",
            "icon_url": "https://ideku.io/assets/images/png/logo-ideku-black.webp",
            "blocks": [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "üì¢ Pytest Automation API Test Report",
                        "emoji": True,
                    },
                },
                {"type": "divider"},
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": f"*üìä Executed Cases:* {payload.get('total_test_cases', 0)}",
                    },
                },
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": f"*‚úÖ Passed:* {payload.get('test_passed', 0)}",
                    },
                },
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": f"*‚ùå Failed:* {payload.get('test_failed', 0)}",
                    },
                },
                {"type": "divider"},
                {
                    "type": "section",
                    "fields": [
                        {
                            "type": "mrkdwn",
                            "text": f"*üìà Success Rate:* {payload.get('test_success_rate', 0)} %",
                        },
                        {
                            "type": "mrkdwn",
                            "text": f"*üå± Environment:* {os.getenv('ENV').upper()}",
                        },
                    ],
                },
                {
                    "type": "section",
                    "fields": [
                        {
                            "type": "mrkdwn",
                            "text": f"*‚è±Ô∏è Duration:* {payload.get('test_duration', 0)} min",
                        },
                        {"type": "mrkdwn", "text": "*üíª Platform:* IDEKU - API"},
                    ],
                },
                {"type": "divider"},
                {
                    "type": "section",
                    # "text": {"type": "mrkdwn", "text": "<!subteam^S0806JP806M>"},
                    "text": {"type": "mrkdwn", "text": "<!channel>"},
                },
                {
                    "type": "context",
                    "elements": [
                        {
                            "type": "plain_text",
                            "text": "Generated by Automation Pipeline",
                            "emoji": True,
                        }
                    ],
                },
            ],
        }

        # Payload for the Slack message
        notif_payload = {
            "icon_url": "https://ideku.io/assets/images/png/logo-ideku-black.webp",
            "data": message,
        }

        # Webhook URL from environment variables
        webhook_slack = os.getenv("SLACK_WEBHOOK")

        # Send the notification via HTTP POST request
        response = requests.post(
            webhook_slack,
            json=message,
            headers={"Content-Type": "application/json"},
        )

        # Check if the response is successful
        if response.status_code == 200:
            print(f"Successfully pushed to Slack: {response.text}")
        else:
            print(f"Failed to push to Slack. Status code: {response}")

    except Exception as error:
        print(f"Error in pushing notification: {error}")


# Call the function to push notification to Slack
if __name__ == "__main__":
    push_notification_slack()
